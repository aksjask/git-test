<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--将对象交给spring来管理-->
    <!--    spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期

        创建bean的三种方式
        1.使用默认构造函数创建
           xml中使用bean标签 配以id和class,且没有其他属性-->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"-->

    <!--2.使用普通工厂创建对象(使用每个类中的方法创建对象,并存入spring容器)-->
    <!--   <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"/>
       <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--3.使用工厂中的静态方法创建对象(使用某个类的静态方法创建对象,存入spring容器-->
    <!--<bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>-->


    <!--
        bean作用范围调整
        bean标签的scope属性
           作用:指定bean的作用范围
           取值
                 singleton :单例的(默认值)
                 prototype :多例
                 request :作用于web应用的请求范围
                 session:用于web应用的会话范围
                 global-session :作用于集群环境的会话范围(全局会话范围),当不是集群环境时,它就是session
    -->

    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton"></bean>-->

    <!-- bean对象的生命周期
     1.单例
         出生:当容器创建时对象出生
         活着:只要容器还在一直活着
         死亡:容器小王,对象消亡
     总结:单例对象的生命周期和容器相同
     2.多例对象
         出生:当我们使用对象时spring框架为为我们创建
         活着:对象只要在使用过程中一直活着
         死亡:对象长时间不用,且没有别的对象引用,由java回收器回收
         -->

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton" init-method="init"
          destroy-method="destroy"></bean>


</beans>