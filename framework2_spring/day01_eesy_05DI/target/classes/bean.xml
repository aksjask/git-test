<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

        <!--将对象交给spring来管理-->
<!--    spring对bean的管理细节
    1.创建bean的三种方式
    2.bean对象的作用范围
    3.bean对象的生命周期

    创建bean的三种方式
    1.使用默认构造函数创建
       xml中使用bean标签 配以id和class,且没有其他属性-->
   <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"-->

    <!--2.使用普通工厂创建对象(使用每个类中的方法创建对象,并存入spring容器)-->
 <!--   <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"/>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--3.使用工厂中的静态方法创建对象(使用某个类的静态方法创建对象,存入spring容器-->
    <!--<bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>-->


<!--
    bean作用范围调整
    bean标签的scope属性
       作用:指定bean的作用范围
       取值
             singleton :单例的(默认值)
             prototype :多例
             request :作用于web应用的请求范围
             session:用于web应用的会话范围
             global-session :作用于集群环境的会话范围(全局会话范围),当不是集群环境时,它就是session
-->

        <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="singleton"></bean>-->

   <!-- bean对象的生命周期
    1.单例
        出生:当容器创建时对象出生
        活着:只要容器还在一直活着
        死亡:容器小王,对象消亡
    总结:单例对象的生命周期和容器相同
    2.多例对象
        出生:当我们使用对象时spring框架为为我们创建
        活着:对象只要在使用过程中一直活着
        死亡:对象长时间不用,且没有别的对象引用,由java回收器回收
        -->



    <!--构造函数注入:
    使用标签:
    标签出现的位置:bean标签的内部
    标签的属性
         type:用于指定要注入的数据的数据类型,该数据类型也是构造函数中某个或某些参数的类型
        index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值,索引的位置从0开始
        name:用于指定给构造函数中指定名称的参数赋值
    ========================以上三个用于指定给构造函数中哪个参数赋值===================================
        value:用于提供基本数据类型和spring类型的数据
        ref:用于指定其他类型的bean数据,它指的就是在spring的ioc容器中出现过的对象

        优势
        注入数据是必须的操作,负责对象无法创建成功

        弊端
        用不到的数据也必须提供

    -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <constructor-arg name="name"  value="泰斯特"/>
        <constructor-arg name="age"  value="18"/>
        <constructor-arg name="birthday"  ref="now"/>
    </bean>

    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date"></bean>

    <!--set方法注入     更常用-->
    <!--涉及的标签:property
    出现的位置:bean标签的内部
    标签的属性
          name :用于             找的是getName,改成name
            value:用于提供基本数据类型和string类型的数据
            ref:用于指定其他类型的bean数据,它指的就是在spring的ioc容器中出现过的对象

            优势: 创建对象没有明确的限制,可以直接使用默认构造函数
            弊端:如果没有成员必须有值,不能保证set一定执行

            -->
    <bean id="accountService2" class="com.itheima.service.impl.AccountServiceImpl2">
        <property name="name" value="TEST"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>

    </bean>

    <!--复杂类型的注入-->
    <bean id="accountService3" class="com.itheima.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property><property name="mySet">
        <set>
            <value>AAA</value>
            <value>BBB</value>
            <value>CCC</value>
        </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="TestA" value="aaa"></entry>
                <entry key="TestB">
                      <value>BBB</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="TestC">ccc</prop>
                <prop key="TestD">DDD</prop>

            </props>
        </property>


    </bean>


</beans>